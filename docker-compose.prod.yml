services:
  bot:
    build:
      context: .
      target: production
    depends_on:
      - postgres
    env_file:
      - .env.production
    environment:
      NODE_ENV: "production"
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database_live/${POSTGRES_DB}"
      BOT_TOKEN: "${BOT_TOKEN}"
    restart: unless-stopped

  postgres:
    image: postgres:17
    container_name: database_live
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_live_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_live_data:
